CREATE TABLE PUBLISHER
(NAME VARCHAR(20) PRIMARY KEY,
PHONE BIGINT,
ADDRESS VARCHAR(20));

CREATE TABLE BOOK
(BOOK_ID INTEGER PRIMARY KEY,
TITLE VARCHAR(20),
PUB_YEAR VARCHAR(20),
PUBLISHER_NAME VARCHAR(20),
FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE);

CREATE TABLE BOOK_AUTHORS
(AUTHOR_NAME VARCHAR(20),
BOOK_ID INTEGER,
FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
PRIMARY KEY(BOOK_ID, AUTHOR_NAME));

CREATE TABLE LIBRARY_BRANCH
(BRANCH_ID INTEGER PRIMARY KEY,
BRANCH_NAME VARCHAR(50),
ADDRESS VARCHAR(50));

CREATE TABLE BOOK_COPIES
(NO_OF_COPIES INTEGER,
BOOK_ID INTEGER,
BRANCH_ID INTEGER,
FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
FOREIGN KEY(BRANCH_ID) REFERENCES LIBRARY_BRANCH(BRANCH_ID) ON DELETE CASCADE,
PRIMARY KEY (BOOK_ID,BRANCH_ID));

CREATE TABLE CARD
(CARD_NO INTEGER PRIMARY KEY);

CREATE TABLE BOOK_LENDING
(DATE_OUT DATE,
DUE_DATE DATE,
BOOK_ID INTEGER,
BRANCH_ID INTEGER,
CARD_NO INTEGER,
FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
FOREIGN KEY (BRANCH_ID) REFERENCES LIBRARY_BRANCH(BRANCH_ID) ON DELETE CASCADE,
FOREIGN KEY (CARD_NO) REFERENCES CARD(CARD_NO) ON DELETE CASCADE,
PRIMARY KEY (BOOK_ID,BRANCH_ID,CARD_NO));

DESC PUBLISHER;
DESC BOOK;
DESC BOOK_AUTHORS;
DESC LIBRARY_BRANCH;
DESC BOOK_COPIES;
DESC CARD;
DESC BOOK_LENDING;

INSERT INTO PUBLISHER VALUES('MCGRAW-HILL',9989076587,'BANGALORE');
INSERT INTO PUBLISHER VALUES('PEARSON',9889076565,'NEW DELHI');
INSERT INTO PUBLISHER VALUES('RANDOM HOUSE',7455679345,'HYDERABAD');
INSERT INTO PUBLISHER VALUES('HACHETTE LIVRE',8970862340,'CHENNAI');
INSERT INTO PUBLISHER VALUES('GRUPO PLANETA',914141414,'BANGALORE');

INSERT INTO BOOK VALUES(1,'DBMS','JAN-2017','MCGRAW-HILL');
INSERT INTO BOOK VALUES(2,'ADBMS','JUN-2016','MCGRAW-HILL');
INSERT INTO BOOK VALUES(3,'CN','SEP-2016','PEARSON');
INSERT INTO BOOK VALUES(4,'CG','SEP-2015','GRUPO PLANETA');
INSERT INTO BOOK VALUES(5,'OS','MAY-2016','PEARSON');

INSERT INTO BOOK_AUTHORS VALUES('NAVATHE',1);
INSERT INTO BOOK_AUTHORS VALUES('NAVATHE',2);
INSERT INTO BOOK_AUTHORS VALUES('TANENBAUM',3);
INSERT INTO BOOK_AUTHORS VALUES('EDWARD ANGEL',4);
INSERT INTO BOOK_AUTHORS VALUES('GALVIN',5);

INSERT INTO LIBRARY_BRANCH VALUES(10,'RR NAGAR','BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES(11,'RNSIT','BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES(12,'RAJAJI NAGAR','BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES(13,'NITTE','MANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES(14,'MANIPAL','UDUPI');

INSERT INTO BOOK_COPIES VALUES(10,1,10);
INSERT INTO BOOK_COPIES VALUES(5,1,11);
INSERT INTO BOOK_COPIES VALUES(2,2,12);
INSERT INTO BOOK_COPIES VALUES(5,2,13);
INSERT INTO BOOK_COPIES VALUES(7,3,14);
INSERT INTO BOOK_COPIES VALUES(1,5,10);
INSERT INTO BOOK_COPIES VALUES(3,4,11);

INSERT INTO CARD VALUES(100);
INSERT INTO CARD VALUES(101);
INSERT INTO CARD VALUES(102);
INSERT INTO CARD VALUES(103);
INSERT INTO CARD VALUES(104);

INSERT INTO BOOK_LENDING VALUES('2017-01-01','2017-06-01', 1, 10, 101);
INSERT INTO BOOK_LENDING VALUES('2017-01-11', '2017-03-11', 3, 14, 101);
INSERT INTO BOOK_LENDING VALUES('2017-02-21', '2017-04-21', 2, 13, 101);
INSERT INTO BOOK_LENDING VALUES('2017-03-15', '2017-07-15', 4, 11, 101);
INSERT INTO BOOK_LENDING VALUES('2017-04-12', '2017-05-12', 1, 11,104);

SELECT * FROM PUBLISHER;
SELECT * FROM BOOK;
SELECT * FROM BOOK_AUTHORS;
SELECT * FROM LIBRARY_BRANCH;
SELECT * FROM BOOK_COPIES;
SELECT * FROM CARD;
SELECT * FROM BOOK_LENDING;

SELECT B.BOOK_ID, B.TITLE, B.PUBLISHER_NAME, A.AUTHOR_NAME,C.NO_OF_COPIES,L.BRANCH_ID
FROM BOOK B, BOOK_AUTHORS A, BOOK_COPIES C, LIBRARY_BRANCH L
WHERE B.BOOK_ID=A.BOOK_ID
AND B.BOOK_ID=C.BOOK_ID
AND L.BRANCH_ID=C.BRANCH_ID;

SELECT CARD_NO
FROM BOOK_LENDING
WHERE DATE_OUT BETWEEN '2017-01-01' AND '2017-06-01'
GROUP BY CARD_NO
HAVING COUNT(*)>3;

DELETE FROM BOOK
WHERE BOOK_ID='3'; 

SELECT * FROM BOOK;

CREATE VIEW V_PUBLICATION AS 
SELECT PUB_YEAR
FROM BOOK; 

SELECT * FROM V_PUBLICATION;

CREATE VIEW V_BOOKS AS
SELECT B.BOOK_ID, B.TITLE, C.NO_OF_COPIES
FROM BOOK B, BOOK_COPIES C, LIBRARY_BRANCH L
WHERE B.BOOK_ID=C.BOOK_ID
AND C.BRANCH_ID=L.BRANCH_ID;

SELECT * FROM V_BOOKS;


------------------------------------------------------------------------------
PROGRAM2



CREATE TABLE SALESMAN(
SALESMAN_ID INTEGER PRIMARY KEY,
NAME VARCHAR(20),
CITY VARCHAR(20),
COMMISSION VARCHAR(20));

CREATE TABLE CUSTOMER1(
CUSTOMER_ID INTEGER PRIMARY KEY,
CUST_NAME VARCHAR(20),
CITY VARCHAR(20),
GRADE INTEGER,
SALESMAN_ID INTEGER,
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE SET NULL);

CREATE TABLE ORDERS(
ORD_NO INTEGER PRIMARY KEY,
PURCHASE_AMOUNT DECIMAL(10,2),
ORD_DATE DATE,
CUSTOMER_ID INTEGER,
SALESMAN_ID INTEGER,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER1(CUSTOMER_ID) ON DELETE CASCADE,
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE);

DESC SALESMAN;
DESC CUSTOMER1;
DESC ORDERS;

INSERT INTO SALESMAN VALUES(1000,'JOHN','BANGALORE','25%');
INSERT INTO SALESMAN VALUES(2000,'RAVI','BANGALORE','20%');
INSERT INTO SALESMAN VALUES(3000,'KUMAR','MYSORE','15%');
INSERT INTO SALESMAN VALUES(4000,'SMITH','DELHI','30%');
INSERT INTO SALESMAN VALUES(5000,'HARSHA','HYDERABAD','15%');

INSERT INTO CUSTOMER1 VALUES(10,'PREETHI','BANGALORE',100,1000);
INSERT INTO CUSTOMER1 VALUES(11,'VIVEK','MANGALORE',300,1000);
INSERT INTO CUSTOMER1 VALUES(12,'BHASKAR','CHENNAI',400,2000);
INSERT INTO CUSTOMER1 VALUES(13,'CHETHAN','BANGALORE',200,2000);
INSERT INTO CUSTOMER1 VALUES(14,'MAMATHA','BANGALORE',400,3000);

INSERT INTO ORDERS VALUES(50,5000,'2017-05-04',10,1000);
INSERT INTO ORDERS VALUES(51,450,'2017-01-20',10,2000);
INSERT INTO ORDERS VALUES(52,1000,'2017-02-24',13,2000);
INSERT INTO ORDERS VALUES(53,3500,'2017-04-13',14,3000);
INSERT INTO ORDERS VALUES(54,550,'2017-03-09',12,2000);

SELECT * FROM SALESMAN;
SELECT * FROM CUSTOMER1;
SELECT * FROM ORDERS;

SELECT GRADE,COUNT(DISTINCT CUSTOMER_ID)
FROM CUSTOMER1
GROUP BY GRADE
HAVING GRADE>(SELECT AVG(GRADE)
FROM CUSTOMER1
WHERE CITY='BANGALORE');

SELECT SALESMAN_ID, NAME
FROM SALESMAN A
WHERE 1<(SELECT COUNT(*)
FROM CUSTOMER1
WHERE SALESMAN_ID=A.SALESMAN_ID);

SELECT SALESMAN.SALESMAN_ID, NAME, CUST_NAME, COMMISSION
FROM SALESMAN , CUSTOMER1 
WHERE SALESMAN.CITY=CUSTOMER1.CITY
UNION
SELECT SALESMAN_ID,NAME,'NO MATCH',COMMISSION
FROM SALESMAN
WHERE NOT CITY = ANY 
(SELECT CITY
FROM CUSTOMER1)
ORDER BY 2 DESC;

CREATE VIEW ELITSALESMAN AS
SELECT B.ORD_DATE, A.SALESMAN_ID, A.NAME
FROM SALESMAN A,ORDERS B
WHERE A.SALESMAN_ID = B.SALESMAN_ID
AND B.PURCHASE_AMOUNT= (SELECT MAX(PURCHASE_AMOUNT)
FROM ORDERS C
WHERE C.ORD_DATE=B.ORD_DATE);

SELECT * FROM ELITSALESMAN;

DELETE FROM SALESMAN
WHERE SALESMAN_ID=1000;

SELECT * FROM SALESMAN;


-----------------------------------------------------------------------------------
Program 3

CREATE TABLE ACTOR (
ACT_ID INTEGER PRIMARY KEY,
ACT_NAME VARCHAR(20),
ACT_GENDER CHAR(1));

DESC ACTOR;

CREATE TABLE DIRECTOR(
DIR_ID INTEGER PRIMARY KEY,
DIR_NAME VARCHAR(20),
DIR_PHONE BIGINT);

DESC DIRECTOR;

CREATE TABLE MOVIES(
MOV_ID INTEGER PRIMARY KEY,
MOV_TITLE VARCHAR(25),
MOV_YEAR INTEGER,
MOV_LANG VARCHAR(12),
DIR_ID INTEGER,
FOREIGN KEY (DIR_ID) REFERENCES DIRECTOR(DIR_ID));

DESC MOVIES;

CREATE TABLE MOVIE_CAST(
ACT_ID INTEGER,
MOV_ID INTEGER,
ROLE VARCHAR(10),
PRIMARY KEY (ACT_ID,MOV_ID),
FOREIGN KEY (ACT_ID) REFERENCES ACTOR(ACT_ID),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID));

DESC MOVIE_CAST;

CREATE TABLE RATING(
MOV_ID INTEGER PRIMARY KEY,
REV_STARS VARCHAR(25),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID));

DESC RATING;

INSERT INTO ACTOR VALUES(301,'ANUSHKA','F');
INSERT INTO ACTOR VALUES(302,'PRABHAS','M');
INSERT INTO ACTOR VALUES(303,'PUNITH','M');
INSERT INTO ACTOR VALUES(304,'JERMY','M');

SELECT * FROM ACTOR;

INSERT INTO DIRECTOR VALUES(60,'RAJAMOULI',8751611001);
INSERT INTO DIRECTOR VALUES(61,'HITCHCOCK',7766138911);
INSERT INTO DIRECTOR VALUES(62,'FARAN',9986776531);
INSERT INTO DIRECTOR VALUES(63,'STEVEN SPIELBERG',8989776530);

SELECT * FROM DIRECTOR;

INSERT INTO MOVIES VALUES(1001,'BAHUBALI-2',2017,'TELAGU',60);
INSERT INTO MOVIES VALUES(1002,'BAHUBALI-1',2015,'TELAGU',60);
INSERT INTO MOVIES VALUES(1003,'AKASH',2008,'KANNADA',61);
INSERT INTO MOVIES VALUES(1004,'WAR HORSE',2011,'ENGLISH',63);

SELECT * FROM MOVIES;

INSERT INTO MOVIE_CAST VALUES(301,1002,'HEROINE');
INSERT INTO MOVIE_CAST VALUES(301,1001,'HEROINE');
INSERT INTO MOVIE_CAST VALUES(303,1003,'HERO');
INSERT INTO MOVIE_CAST VALUES(303,1002,'GUEST');
INSERT INTO MOVIE_CAST VALUES(304,1004,'HERO');

SELECT * FROM MOVIE_CAST;

INSERT INTO RATING VALUES(1001,4);
INSERT INTO RATING VALUES(1002,2);
INSERT INTO RATING VALUES(1003,5);
INSERT INTO RATING VALUES(1004,4);

SELECT * FROM RATING;

SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID = (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME='HITCHCOCK');

SELECT MOV_TITLE
FROM MOVIES M,MOVIE_CAST MV
WHERE M.MOV_ID=MV.MOV_ID AND ACT_ID IN (SELECT ACT_ID
FROM MOVIE_CAST GROUP BY ACT_ID
HAVING COUNT(ACT_ID)>1)
GROUP BY MOV_TITLE
HAVING COUNT(*)>1;

SELECT ACT_NAME,MOV_TITLE,MOV_YEAR
FROM ACTOR A
JOIN MOVIE_CAST C
ON A.ACT_ID=C.ACT_ID
JOIN MOVIES M
ON C.MOV_ID=M.MOV_ID
WHERE M.MOV_YEAR NOT BETWEEN 2000 AND 2015;

SELECT MOV_TITLE,MAX(REV_STARS)
FROM MOVIES
INNER JOIN RATING USING (MOV_ID)
GROUP BY MOV_TITLE
HAVING MAX(REV_STARS)>0
ORDER BY MOV_TITLE;

UPDATE RATING
SET REV_STARS=5
WHERE MOV_ID IN (SELECT MOV_ID FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME='STEVEN SPIELBERG'));

SELECT * FROM RATING;

Queries:
1. List the titles of all movies directed by â€˜Hitchcockâ€™.
SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID FROM DIRECTOR WHERE DIR_NAME = 'HITCHCOCK');



2. Find the movie names where one or more actors acted in two or more movies.
SELECT MOV_TITLE
FROM MOVIES M
JOIN MOVIE_CAST MV ON M.MOV_ID = MV.MOV_ID
WHERE MV.ACT_ID IN (
    SELECT ACT_ID
    FROM MOVIE_CAST
    GROUP BY ACT_ID
    HAVING COUNT(ACT_ID) > 1
)
GROUP BY MOV_TITLE
HAVING COUNT(*) > 1;

3. List all actors who acted in a movie before 2000 and also in a movie after 2015 (use
JOIN operation).
SELECT A.ACT_NAME, M.MOV_TITLE, M.MOV_YEAR
FROM ACTOR A
JOIN MOVIE_CAST C ON A.ACT_ID = C.ACT_ID
JOIN MOVIES M ON C.MOV_ID = M.MOV_ID
WHERE M.MOV_YEAR < 2000 OR M.MOV_YEAR > 2015;


4. Find the title of movies and number of stars for each movie that has at least one rating
and find the highest number of stars that movie received. Sort the result by movie title.
SELECT M.MOV_TITLE, MAX(R.REV_STARS) AS Max_Stars
FROM MOVIES M
INNER JOIN RATING R ON M.MOV_ID = R.MOV_ID
GROUP BY M.MOV_TITLE
HAVING MAX(R.REV_STARS) > 0
ORDER BY M.MOV_TITLE;

5. Update rating of all movies directed by â€˜Steven Spielbergâ€™ to 5
KL
UPDATE RATING
SET REV_STARS = 5
WHERE MOV_ID IN (
    SELECT MOV_ID
    FROM MOVIES
    WHERE DIR_ID IN (
        SELECT DIR_ID
        FROM DIRECTOR
        WHERE DIR_NAME = 'Steven Spielberg'
    )
);

-----------------------------------------------------------------------------------
Program 4


Consider the schema for College Database:
STUDENT (USN, SName, Address, Phone,
Gender) SEMSEC (SSID, Sem, Sec)
CLASS (USN, SSID)
SUBJECT (Subcode, Title, Sem, Credits)
IAMARKS (USN, Subcode, SSID, Test1, Test2, Test3,
FinalIA) Write SQL queries to
1. List all the student details studying in fourth semester â€˜Câ€™ section.
2. Compute the total number of male and female students in each semester and in each
section.
3. Create a view of Test1 marks of student USN â€˜1BI15CS101â€™ in all subjects.
4. Calculate the FinalIA (average of best two test marks) and update the
corresponding table for all students.
5. Categorize students based on the following criterion: If
FinalIA = 17 to 20 then CAT = â€˜Outstandingâ€™
If FinalIA = 12 to 16 then CAT = â€˜Averageâ€™ If
FinalIA< 12 then CAT = â€˜Weakâ€™
Give these details only for 8th semester A, B, and C section students.


Table Creation
CREATE TABLE STUDENT (
USN VARCHAR (10) PRIMARY KEY,
SNAME VARCHAR (25),
ADDRESS VARCHAR (25),
PHONE NUMBER (10),
GENDER CHAR (1));
CREATE TABLE SEMSEC (
SSID VARCHAR (5) PRIMARY KEY,
SEM NUMBER (2),
SEC CHAR (1));
CREATE TABLE CLASS
( USN VARCHAR (10),
SSID VARCHAR (5),
PRIMARY KEY (USN,
SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN),
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID));

CREATE TABLE SUBJECT
( SUBCODE VARCHAR (8),
TITLE VARCHAR (20),
SEM NUMBER (2),
CREDITS NUMBER (2),
PRIMARY KEY
(SUBCODE));
CREATE TABLE IAMARKS (
USN VARCHAR (10),
SUBCODE VARCHAR (8),
SSID VARCHAR (5),
TEST1 NUMBER (2),
TEST2 NUMBER (2),
TEST3 NUMBER (2),
FINALIA NUMBER (2),
PRIMARY KEY (USN, SUBCODE, SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN),
FOREIGN KEY (SUBCODE) REFERENCES SUBJECT (SUBCODE),
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID));


Table Descriptions
DESC STUDENT;

DESC SEMSEC;

DESC CLASS;


DESC SUBJECT;

DESC IAMARKS;


Insertion of values to tables
INSERT INTO STUDENT VALUES
('1RN13CS020','AKSHAY','BELAGAVI', 8877881122,'M');
INSERT INTO STUDENT VALUES('1RN13CS062','SANDHYA','BENGALURU',
7722829912,'F');
INSERT INTO STUDENT VALUES
('1RN13CS091','TEESHA','BENGALURU', 7712312312,'F');
INSERT INTO STUDENT VALUES
('1RN13CS066','SUPRIYA','MANGALURU', 8877881122,'F');
INSERT INTO STUDENTVALUES
('1RN14CS010','ABHAY','BENGALURU', 9900211201,'M');
INSERT INTO STUDENT VALUES
('1RN14CS032','BHASKAR','BENGALURU', 9923211099,'M');
INSERT INTO STUDENTVALUES ('1RN14CS025','ASMI','BENGALURU',
7894737377,'F'); INSERT INTO STUDENT VALUES ('1RN15CS011','AJAY','TUMKUR',
9845091341,'M');


INSERT INTO STUDENT VALUES ('1RN15CS029','CHITRA','DAVANGERE',
7696772121,'F');
INSERT INTO STUDENT VALUES ('1RN15CS045','JEEVA','BELLARY',
9944850121,'M'); INSERT INTO STUDENT VALUES
('1RN15CS091','SANTOSH','MANGALURU', 8812332201,'M');
INSERT INTO STUDENT VALUES('1RN16CS045','ISMAIL','KALBURGI',
9900232201,'M');
INSERT INTO STUDENT VALUES ('1RN16CS088','SAMEERA','SHIMOGA',
9905542212,'F');
INSERT INTO STUDENT VALUES ('1RN16CS122','VINAYAKA','CHIKAMAGALUR',
8800880011,'M');
INSERT INTO SEMSEC VALUES ('CSE8A', 8,'A');
INSERT INTO SEMSEC VALUES (â€—CSE8B',
8,'B'); INSERT INTO SEMSEC VALUES (â€—CSE8Câ€ž,
8,â€žCâ€ž);
INSERT INTO SEMSEC VALUES ('CSE7A',
7,â€žAâ€ž); INSERT INTO SEMSEC VALUES
(â€—CSE7Bâ€ž, 7,'Bâ€ž); INSERT INTO SEMSEC
VALUES ('CSE7C', 7,'C');
INSERT INTO SEMSEC VALUES (â€—CSE6A', 6,'A');
INSERT INTO SEMSEC VALUES (â€—CSE6Bâ€ž,
6,â€žBâ€ž); INSERT INTO SEMSEC VALUES ('CSE6Câ€ž,
6,â€žCâ€ž);
INSERT INTO SEMSEC VALUES (â€—CSE5Aâ€ž,
5,'Aâ€ž); INSERT INTO SEMSEC VALUES ('CSE5B',
5,'B'); INSERT INTO SEMSEC VALUES (â€—CSE5C',
5,'C');
INSERT INTO SEMSEC VALUES (â€—CSE4Aâ€ž,
4,â€žAâ€ž); INSERT INTO SEMSEC VALUES
('CSE4B', 4,â€žBâ€ž); INSERT INTO SEMSEC VALUES
(â€—CSE4Câ€ž, 4,'Câ€ž);
INSERT INTO SEMSEC VALUES ('CSE3A', 3,'A');
INSERT INTO SEMSEC VALUES (â€—CSE3B',
3,'B'); INSERT INTO SEMSEC VALUES (â€—CSE3Câ€ž,
3,â€žCâ€ž);


INSERT INTO SEMSEC VALUES ('CSE2A',
2,â€žAâ€ž); INSERT INTO SEMSEC VALUES
(â€—CSE2Bâ€ž, 2,'Bâ€ž); INSERT INTO SEMSEC
VALUES ('CSE2C', 2,'C'); INSERT INTO SEMSEC
VALUES (â€—CSE1A', 1,'A');


INSERT INTO SEMSEC VALUES (â€—CSE1Bâ€ž, 1,â€žBâ€ž);
INSERT INTO SEMSEC VALUES ('CSE1C', 1,â€žCâ€ž);
INSERT INTO CLASS VALUES
(â€—1RN13CS020â€ž,â€žCSE8Aâ€ž); INSERT INTO CLASS
VALUES (â€—1RN13CS062â€ž,â€žCSE8Aâ€ž); INSERT INTO
CLASS VALUES (â€—1RN13CS066â€ž,â€žCSE8Bâ€ž); INSERT
INTO CLASS VALUES (â€—1RN13CS091â€ž,â€žCSE8Câ€ž);
INSERT INTO CLASS VALUES
(â€—1RN14CS010â€ž,â€žCSE7Aâ€ž); INSERT INTO CLASS
VALUES (â€—1RN14CS025â€ž,â€žCSE7Aâ€ž); INSERT INTO
CLASS VALUES (â€—1RN14CS032â€ž,â€žCSE7Aâ€ž);
INSERT INTO CLASS VALUES
(â€—1RN15CS011â€ž,â€žCSE4Aâ€ž); INSERT INTO CLASS
VALUES (â€—1RN15CS029â€ž,â€žCSE4Aâ€ž); INSERT INTO
CLASS VALUES (â€—1RN15CS045â€ž,â€žCSE4Bâ€ž); INSERT
INTO CLASS VALUES (â€—1RN15CS091â€ž,â€žCSE4Câ€ž);
INSERT INTO CLASS VALUES
(â€—1RN16CS045â€ž,â€žCSE3Aâ€ž); INSERT INTO CLASS
VALUES (â€—1RN16CS088â€ž,â€žCSE3Bâ€ž); INSERT INTO
CLASS VALUES (â€—1RN16CS122â€ž,â€žCSE3Câ€ž);
INSERT INTO SUBJECT VALUES ('10CS81','ACA', 8, 4);
INSERT INTO SUBJECT VALUES ('10CS82','SSM', 8, 4);
INSERT INTO SUBJECT VALUES ('10CS83','NM', 8, 4);
INSERT INTO SUBJECT VALUES ('10CS84','CC', 8, 4);
INSERT INTO SUBJECT VALUES ('10CS85','PW', 8, 4);
INSERT INTO SUBJECT VALUES ('10CS71','OOAD', 7, 4);
INSERT INTO SUBJECT VALUES ('10CS72','ECS', 7, 4);
INSERT INTO SUBJECT VALUES ('10CS73','PTW', 7, 4);
INSERT INTO SUBJECT VALUES ('10CS74','DWDM', 7,
4); INSERT INTO SUBJECT VALUES (â€—10CS75','JAVA', 7,
4); INSERT INTO SUBJECT VALUES ('10CS76','SAN', 7,
4);
INSERT INTO SUBJECT VALUES ('15CS51', 'ME', 5, 4);
INSERT INTO SUBJECT VALUES ('15CS52','CN', 5, 4);


INSERT INTO SUBJECT VALUES ('15CS53','DBMS', 5,
4); INSERT INTO SUBJECT VALUES ('15CS54','ATC', 5,
4); INSERT INTO SUBJECT VALUES ('15CS55','JAVA', 5,
3); INSERT INTO SUBJECT VALUES ('15CS56','AI', 5, 3);

INSERT INTO SUBJECT VALUES ('15CS41','M4', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS42','SE', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS43','DAA', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS44','MPMC', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS45','OOC', 4, 3);
INSERT INTO SUBJECT VALUES ('15CS46','DC', 4, 3);
INSERT INTO SUBJECT VALUES ('15CS31','M3', 3, 4);
INSERT INTO SUBJECT VALUES ('15CS32','ADE', 3, 4);
INSERT INTO SUBJECT VALUES ('15CS33','DSA', 3, 4);
INSERT INTO SUBJECT VALUES ('15CS34','CO', 3, 4);
INSERT INTO SUBJECT VALUES ('15CS35','USP', 3, 3);
INSERT INTO SUBJECT VALUES ('15CS36','DMS', 3, 3);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3)
VALUES ('1RN13CS091','10CS81','CSE8C', 15, 16, 18);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3)
VALUES ('1RN13CS091','10CS82','CSE8C', 12, 19, 14);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3)
VALUES ('1RN13CS091','10CS83','CSE8C', 19, 15, 20);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3)
VALUES ('1RN13CS091','10CS84','CSE8C', 20, 16, 19);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3)
VALUES ('1RN13CS091','10CS85','CSE8C', 15, 15, 12);
SELECT * FROM STUDENT;


SELECT * FROM SEMSEC;

SELECT * FROM CLASS;

SELECT * FROM SUBJECT;



Queries:
1. List all the student details studying in fourth semester â€˜Câ€™ section.
SELECT S.*, SS.SEM, SS.SEC
FROM STUDENT S, SEMSEC SS, CLASS C
WHERE S.USN = C.USN AND
SS.SSID = C.SSID AND
SS.SEM = 4 AND
SS.SEc=â€žCâ€ž;


2. Compute the total number of male and female students in each semester and in each
section.
SELECT SS.SEM, SS.SEC, S.GENDER, COUNT (S.GENDER) AS COUNT FROM
STUDENT S, SEMSEC SS, CLASS C
WHERES.USN = C.USN AND
SS.SSID = C.SSID
GROUP BY SS.SEM, SS.SEC, S.GENDER
ORDER BY SEM;

3. Create a view of Test1 marks of student USN â€˜1BI15CS101â€™ in all subjects.
CREATE VIEW STU_TEST1_MARKS_VIEW AS
SELECT TEST1, SUBCODE
FROM IAMARKS
WHERE USN = '1RN13CS091';


4.Calculate the FinalIA (average of best two test marks) and update the corresponding
table for all students.
CREATE OR REPLACE PROCEDURE AVGMARKS IS
CURSOR C_IAMARKS IS
SELECT GREATEST(TEST1,TEST2) AS A, GREATEST(TEST1,TEST3) AS B,
GREATEST(TEST3,TEST2) AS C
FROM IAMARKS
WHERE FINALIA IS NULL
FOR UPDATE;
C_A NUMBER;
C_B NUMBER;
C_C NUMBER;
C_SM NUMBER;
C_AV NUMBER;
BEGIN
OPEN C_IAMARKS;
LOOP
FETCH C_IAMARKS INTO C_A, C_B, C_C; EXIT
WHEN C_IAMARKS%NOTFOUND;
--DBMS_OUTPUT.PUT_LINE(C_A || ' ' || C_B || ' ' || C_C); IF (C_A
!= C_B) THEN
C_SM:=C_A+C_B; ELSE
C_SM:=C_A+C_C;
END IF;
C_AV:=C_SM/2;
--DBMS_OUTPUT.PUT_LINE('SUM = '||C_SM);
--DBMS_OUTPUT.PUT_LINE('AVERAGE = '||C_AV);
UPDATE IAMARKS SET FINALIA=C_AV WHERE CURRENT OF C_IAMARKS;
END LOOP;
CLOSE C_IAMARKS;
END;
/



-----------------------------------------------------------------------------------
Program 5


E. Consider the schema for Company Database:
EMPLOYEE (SSN, Name, Address, Sex, Salary, SuperSSN,
DNo) DEPARTMENT (DNo, DName, MgrSSN, MgrStartDate)
DLOCATION (DNo,DLoc)
PROJECT (PNo, PName, PLocation,
DNo) WORKS_ON (SSN, PNo, Hours)
Write SQL queries to
1. Make a list of all project numbers for projects that involve an employee whose last name is
â€˜Scottâ€™, either as a worker or as a manager of the department that controls the project.
2. Show the resulting salaries if every employee working on the â€˜IoTâ€™ project is given a 10
percent raise.
3. Find the sum of the salaries of all employees of the â€˜Accountsâ€™ department, as well as the
maximum salary, the minimum salary, and the average salary in this department
4. Retrieve the name of each employee who works on all the projects controlled by
department number 5 (use NOT EXISTS operator). For each department that has more
than five employees, retrieve the department number and the number of its employees
who are making more than Rs. 6,00,000.


Table Creation
CREATE TABLE DEPARTMENT
(DNO VARCHAR2 (20) PRIMARY KEY,
DNAME VARCHAR2 (20),
MGRSTARTDATE DATE);
CREATE TABLE EMPLOYEE
(SSN VARCHAR2 (20) PRIMARY
KEY, FNAME VARCHAR2 (20),
LNAME VARCHAR2 (20),
ADDRESS VARCHAR2 (20),
SEX CHAR (1),
SALARY INTEGER,
SUPERSSN REFERENCES EMPLOYEE
(SSN), DNO REFERENCES DEPARTMENT
(DNO));


ALTER TABLE DEPARTMENT
ADD MGRSSN REFERENCES EMPLOYEE (SSN);
CREATE TABLE
DLOCATION (DLOC
VARCHAR2 (20),
DNO REFERENCES DEPARTMENT
(DNO), PRIMARY KEY (DNO, DLOC));
CREATE TABLE PROJECT
(PNO INTEGER PRIMARY
KEY, PNAME VARCHAR2 (20),
PLOCATION VARCHAR2 (20),
DNO REFERENCES DEPARTMENT (DNO));
CREATE TABLE
WORKS_ON (HOURS
NUMBER (2),
SSN REFERENCES EMPLOYEE
(SSN), PNO REFERENCES
PROJECT(PNO), PRIMARY KEY
(SSN, PNO));
Table Descriptions
DESC EMPLOYEE;


DESC DEPARTMENT;
DESC DLOCATION;
DESC PROJECT;
DESC WORKS_ON;


Insertion of values to tables
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY)
VALUES (â€—RNSECE01â€ž,â€žJOHNâ€ž,â€žSCOTTâ€ž,â€žBANGALOREâ€ž,â€žMâ€ž, 450000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSCSE01â€ž,â€žJAMESâ€ž,â€žSMITHâ€ž,â€žBANGALOREâ€ž,â€žMâ€ž, 500000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY)
VALUES (â€—RNSCSE02â€ž,â€žHEARNâ€ž,â€žBAKERâ€ž,â€žBANGALOREâ€ž,â€žMâ€ž, 700000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSCSE03â€ž,â€žEDWARDâ€ž,â€žSCOTTâ€ž,â€žMYSOREâ€ž,â€žMâ€ž, 500000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY)
VALUES (â€—RNSCSE04â€ž,â€žPAVANâ€ž,â€žHEGDEâ€ž,â€žMANGALOREâ€ž,â€žMâ€ž, 650000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSCSE05â€ž,â€žGIRISHâ€ž,â€žMALYAâ€ž,â€žMYSOREâ€ž,â€žMâ€ž, 450000);



INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY)
VALUES (â€—RNSCSE06â€ž,â€žNEHAâ€ž,â€žSNâ€ž,â€žBANGALOREâ€ž,â€žFâ€ž, 800000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSACC01â€ž,â€žAHANAâ€ž,â€žKâ€ž,â€žMANGALOREâ€ž,â€žFâ€ž, 350000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSACC02â€ž,â€žSANTHOSHâ€ž,â€žKUMARâ€ž,â€žMANGALOREâ€ž,â€žMâ€ž, 300000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSISE01â€ž,â€žVEENAâ€ž,â€žMâ€ž,â€žMYSOREâ€ž,â€žMâ€ž, 600000);
INSERT INTO EMPLOYEE (SSN, FNAME, LNAME, ADDRESS, SEX, SALARY) VALUES
(â€—RNSIT01â€ž,â€žNAGESHâ€ž,â€žHRâ€ž,â€žBANGALOREâ€ž,â€žMâ€ž, 500000);
INSERT INTO DEPARTMENT VALUES (â€—1â€ž,â€žACCOUNTSâ€ž,â€ž01-JAN01â€ž,â€žRNSACC02â€ž); INSERT INTO DEPARTMENT VALUES (â€—2â€ž,â€žITâ€ž,â€ž01-AUG16â€ž,â€žRNSIT01â€ž);
INSERT INTO DEPARTMENT VALUES (â€—3â€ž,â€žECEâ€ž,â€ž01-JUN08â€ž,â€žRNSECE01â€ž); INSERT INTO DEPARTMENT VALUES (â€—4â€ž,â€žISEâ€ž,â€ž01-
AUG-15â€ž,â€žRNSISE01â€ž); INSERT INTO DEPARTMENT VALUES
(â€—5â€ž,â€žCSEâ€ž,â€ž01-JUN-02â€ž,â€žRNSCSE05â€ž);
Note: update entries of employee table to fill missing fields SUPERSSN and DNO
UPDATE EMPLOYEE SET
SUPERSSN=NULL,
DNO=â€ž3â€ž WHERE
SSN=â€žRNSECE01â€ž;
UPDATE EMPLOYEE SET
SUPERSSN=â€žRNSCSE02â€ž,
DNO=â€ž5â€ž WHERE
SSN=â€žRNSCSE01â€ž;
UPDATE EMPLOYEE SET
SUPERSSN=â€žRNSCSE03â€ž,
DNO=â€ž5â€ž WHERE
SSN=â€žRNSCSE02â€ž;
UPDATE EMPLOYEE SET
SUPERSSN=â€žRNSCSE04â€ž,
DNO=â€ž5â€ž WHERE
SSN=â€žRNSCSE03â€ž;



UPDATE EMPLOYEE SET
DNO=â€ž5â€ž,
SUPERSSN=â€žRNSCSE05â€ž WHERE
SSN=â€žRNSCSE04â€ž;



UPDATE EMPLOYEE SET
DNO=â€ž5â€ž,
SUPERSSN=â€žRNSCSE06â€ž WHERE
SSN=â€žRNSCSE05â€ž;
UPDATE EMPLOYEE SET
DNO=â€ž5â€ž,
SUPERSSN=NULL WHERE
SSN=â€žRNSCSE06â€ž;
UPDATE EMPLOYEE SET
DNO=â€ž1â€ž,
SUPERSSN=â€žRNSACC02â€ž WHERE
SSN=â€žRNSACC01â€ž;
UPDATE EMPLOYEE SET
DNO=â€ž1â€ž,
SUPERSSN=NULL WHERE
SSN=â€žRNSACC02â€ž;
UPDATE EMPLOYEE SET
DNO=â€ž4â€ž,
SUPERSSN=NULL WHERE
SSN=â€žRNSISE01â€ž;
UPDATE EMPLOYEE SET
DNO=â€ž2â€ž,
SUPERSSN=NULL WHERE
SSN=â€žRNSIT01â€ž;
INSERT INTO DLOCATION VALUES (â€žBANGALOREâ€ž,
â€—1â€ž); INSERT INTO DLOCATION VALUES
(â€žBANGALOREâ€ž, â€—2â€ž); INSERT INTO DLOCATION
VALUES (â€žBANGALOREâ€ž, â€—3â€ž); INSERT INTO
DLOCATION VALUES (â€žMANGALOREâ€ž, â€—4â€ž); INSERT
INTO DLOCATION VALUES (â€žMANGALOREâ€ž, â€—5â€ž);
INSERT INTO PROJECT VALUES (100,â€žIOTâ€ž,â€žBANGALOREâ€ž,â€ž5â€ž);
INSERT INTO PROJECT VALUES (101,â€žCLOUDâ€ž,â€žBANGALOREâ€ž,â€ž5â€ž);
INSERT INTO PROJECT VALUES (102,â€žBIGDATAâ€ž,â€žBANGALOREâ€ž,â€ž5â€ž);
INSERT INTO PROJECT VALUES (103,â€žSENSORSâ€ž,â€žBANGALOREâ€ž,â€ž3â€ž);


INSERT INTO PROJECT VALUES (104,â€žBANK MANAGEMENTâ€ž,â€žBANGALOREâ€ž,â€ž1â€ž);
INSERT INTO PROJECT VALUES (105,â€žSALARYMANAGEMENTâ€ž,â€žBANGALOREâ€ž,â€ž1â€ž);
INSERT INTO PROJECT VALUES (106,â€žOPENSTACKâ€ž,â€žBANGALOREâ€ž,â€ž4â€ž);
INSERT INTO PROJECT VALUES (107,â€žSMARTCITYâ€ž,â€žBANGALOREâ€ž,â€ž2â€ž);

INSERT INTO WORKS_ON VALUES (4, â€—RNSCSE01â€ž, 100);
INSERT INTO WORKS_ON VALUES (6, â€—RNSCSE01â€ž, 101);
INSERT INTO WORKS_ON VALUES (8, â€—RNSCSE01â€ž, 102);
INSERT INTO WORKS_ON VALUES (10, â€—RNSCSE02â€ž,
100); INSERT INTO WORKS_ON VALUES (3, â€—RNSCSE04â€ž,
100); INSERT INTO WORKS_ON VALUES (4, â€—RNSCSE05â€ž,
101); INSERT INTO WORKS_ON VALUES (5, â€—RNSCSE06â€ž,
102); INSERT INTO WORKS_ON VALUES (6, â€—RNSCSE03â€ž,
102); INSERT INTO WORKS_ON VALUES (7, â€—RNSECE01â€ž,
103); INSERT INTO WORKS_ON VALUES (5, â€—RNSACC01â€ž,
104); INSERT INTO WORKS_ON VALUES (6, â€—RNSACC02â€ž,
105); INSERT INTO WORKS_ON VALUES (4, â€—RNSISE01â€ž,
106); INSERT INTO WORKS_ON VALUES (10, â€—RNSIT01â€ž,
107);
SELECT * FROM EMPLOYEE;

SELECT * FROM DEPARTMENT;
SELECT * FROM DLOCATION;


SELECT * FROM DEPARTMENT;
SELECT * FROM DLOCATION;


Queries:
1. Make a list of all project numbers for projects that involve an employee whose last name
is â€˜Scottâ€™, either as a worker or as a manager of the department that controlsthe project.
(SELECT DISTINCT P.PNO
FROM PROJECT P, DEPARTMENT D, EMPLOYEE E
WHERE E.DNO=D.DNO
AND D.MGRSSN=E.SSN
AND E.LNAME=â€žSCOTTâ€ž)
UNION
(SELECT DISTINCT P1.PNO
FROM PROJECT P1, WORKS_ON W, EMPLOYEE E1
WHERE P1.PNO=W.PNO
AND E1.SSN=W.SSN
AND E1.LNAME=â€žSCOTTâ€ž);

2. Show the resulting salaries if every employee working on the â€˜IoTâ€™ project is given a10
percent raise.
SELECT E.FNAME, E.LNAME, 1.1*E.SALARY AS INCR_SAL
FROM EMPLOYEE E, WORKS_ON W, PROJECT P
WHERE E.SSN=W.SSN
AND W.PNO=P.PNO
AND P.PNAME=â€žIOT";


3. Find the sum of the salaries of all employees of the â€˜Accountsâ€™ department, as well as
the maximum salary, the minimum salary, and the average salary in this department
SELECT SUM (E.SALARY), MAX (E.SALARY), MIN (E.SALARY), AVG
(E.SALARY)
FROM EMPLOYEE E, DEPARTMENT D
WHERE E.DNO=D.DNO
AND D.DNAME=â€žACCOUNTSâ€ž;


4. Retrieve the name of each employee who works on all the projects Controlled by
department number 5 (use NOT EXISTS operator).
SELECT E.FNAME, E.LNAME
FROM EMPLOYEE E
WHERE NOT EXISTS((SELECT PNO
FROM PROJECT
WHERE DNO=â€ž5â€ž) MINUS (SELECT PNO FROM
WORKS_ON WHERE E.SSN=SSN));



5. For each department that has more than five employees, retrieve the department
number and the number of its employees who are making more than Rs. 6, 00,000.
SELECT D.DNO, COUNT (*)
FROM DEPARTMENT D, EMPLOYEE E
WHERE D.DNO=E.DNO
AND E.SALARY>600000
AND D.DNO IN (SELECT E1.DNO
FROM EMPLOYEE E1 GROUP BY
E1.DNO HAVING COUNT (*)>5)
GROUP BY D.DNO;